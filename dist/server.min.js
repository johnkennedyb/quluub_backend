const express=require("express"),http=require("http"),{Server:Server}=require("socket.io"),dotenv=require("dotenv"),connectDB=require("./config/db"),{notFound:notFound,errorHandler:errorHandler}=require("./middlewares/errorHandler_fixed"),adminRoutes=require("./routes/adminRoutes"),authRoutes=require("./routes/authRoutes"),chatRoutes=require("./routes/chatRoutes"),emailRoutes=require("./routes/emailRoutes"),matchNotificationRoutes=require("./routes/matchNotificationRoutes"),notificationRoutes=require("./routes/notificationRoutes"),paymentRoutes=require("./routes/paymentRoutes"),referralRoutes=require("./routes/referralRoutes"),relationshipRoutes=require("./routes/relationshipRoutes"),reportRoutes=require("./routes/reportRoutes"),userRoutes=require("./routes/userRoutes"),waliRoutes=require("./routes/waliRoutes"),feedRoutes=require("./routes/feedRoutes"),monthlyUsageRoutes=require("./routes/monthlyUsageRoutes"),dashboardRoutes=require("./routes/dashboard"),peerjsRoutes=require("./routes/peerjsRoutes"),videoRecordingRoutes=require("./routes/videoRecordingRoutes"),videoCallTimeRoutes=require("./routes/videoCallTime"),cors=require("cors"),mongoose=require("mongoose"),User=require("./models/User"),VideoCallTime=require("./models/VideoCallTime"),compression=require("compression"),{trackRequestPerformance:trackRequestPerformance,performanceEndpoint:performanceEndpoint,healthCheckEndpoint:healthCheckEndpoint}=require("./middlewares/performanceMonitor"),{createIndexes:createIndexes}=require("./config/indexes"),{startScheduler:startScheduler}=require("./utils/emailScheduler");dotenv.config({path:"./env (1)"}),connectDB();const{ExpressPeerServer:ExpressPeerServer}=require("peer"),app=express(),server=http.createServer(app),peerServer=ExpressPeerServer(server,{debug:"production"!==process.env.NODE_ENV,path:"/",allow_discovery:!0,proxied:!0,cors:{origin:["https://quluub-reborn-project-33.vercel.app","http://localhost:8080","http://localhost:5173","https://preview--quluub-reborn-project-99.lovable.app","https://love.quluub.com","https://match.quluub.com"],credentials:!0},iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"},{urls:process.env.TURN_URL,username:process.env.TURN_USERNAME,credential:process.env.TURN_PASSWORD}].filter(e=>e.urls)});app.use("/peerjs",peerServer);const corsOptions={origin:function(e,i){i(null,!0)},methods:["GET","HEAD","PUT","PATCH","POST","DELETE","OPTIONS"],allowedHeaders:["Content-Type","Authorization","X-Requested-With","Accept","Origin"],credentials:!0,optionsSuccessStatus:204,preflightContinue:!1};app.use(cors(corsOptions)),app.use(compression({level:6})),app.use(express.json());const io=new Server(server,{cors:corsOptions,transports:["websocket","polling"],pingTimeout:2e4,pingInterval:1e4,upgradeTimeout:5e3,maxHttpBufferSize:5e5,connectTimeout:1e4,serveClient:!1,cookie:!1,allowRequest:(e,i)=>{i(null,!0)},perMessageDeflate:{threshold:512,concurrencyLimit:5,memLevel:6}});let onlineUsers=new Map,webrtcUsers=new Map;app.set("io",io),app.set("onlineUsers",onlineUsers);const webrtcNamespace=io.of("/webrtc");webrtcNamespace.use(async(e,i)=>{try{const t=e.handshake.auth.token;if(!t)return i(new Error("Authentication error: No token provided"));const r=require("jsonwebtoken").verify(t,process.env.JWT_SECRET),o=require("./models/User"),s=await o.findById(r.id);if(!s)return i(new Error("Authentication error: User not found"));e.userId=s._id.toString(),e.user=s,console.log("✅ Socket authenticated for user:",s.fname,s._id),i()}catch(e){console.error("❌ Socket authentication error:",e.message),i(new Error("Authentication error"))}}),io.on("connection",e=>{e.on("join",i=>{e.join(i),onlineUsers.set(i.toString(),e.id),onlineUsers.size%10==0&&io.emit("getOnlineUsers",Array.from(onlineUsers.keys()))}),e.on("join_conversation",i=>{e.join(i)}),e.on("leave_conversation",i=>{e.leave(i)}),e.on("send-video-call-invitation",async i=>{const t=i.recipientId.toString(),r=i.callerId.toString();let o=null,s=300;try{if(o=await VideoCallTime.getOrCreatePairRecord(r,t),!o.canMakeVideoCall()){const t={type:"video_call_rejected",reason:"time_limit_exceeded",message:"Video call time limit (5 minutes) exceeded for this match. No more video calls allowed.",remainingTime:0,limitExceeded:!0,sessionId:i.sessionId};return void e.emit("video_call_rejected",t)}s=o.getRemainingTime()}catch(e){}const a={senderId:r,recipientId:t,message:`${i.callerName} is inviting you to a video call`,messageType:"video_call_invitation",videoCallData:{callerId:r,callerName:i.callerName,sessionId:i.sessionId,timestamp:i.timestamp,status:"pending",remainingTime:s},createdAt:(new Date).toISOString()},n=onlineUsers.get(t);let l=!1;if(n)try{io.to(n).emit("video_call_invitation",a),io.to(n).emit("send-video-call-invitation",{callerId:r,callerName:i.callerName,callerUsername:i.callerUsername,recipientId:t,sessionId:i.sessionId,timestamp:i.timestamp}),l=!0}catch(e){}try{io.to(t).emit("video_call_invitation",a),io.to(t).emit("send-video-call-invitation",{callerId:r,callerName:i.callerName,callerUsername:i.callerUsername,recipientId:t,sessionId:i.sessionId,timestamp:i.timestamp}),l=!0}catch(e){}try{io.emit("video_call_invitation_broadcast",{callerId:r,callerName:i.callerName,callerUsername:i.callerUsername,recipientId:t,sessionId:i.sessionId,timestamp:i.timestamp,...a,targetUserId:t})}catch(e){}e.emit("video-call-invitation-result",{success:l,recipientOnline:!!n})}),e.on("reject-video-call",e=>{const{sessionId:i,callerId:t,reason:r}=e,o=onlineUsers.get(t.toString());o&&(io.to(o).emit("video_call_rejected",{sessionId:i,reason:r,message:"busy"===r?"User is currently busy":"Call was declined"}),io.to(o).emit("call-status-update",{sessionId:i,status:"declined",callerId:t,otherUserName:e.recipientName||"Unknown",otherUserUsername:e.recipientUsername||"Unknown"})),io.to(t.toString()).emit("video_call_rejected",{sessionId:i,reason:r,message:"busy"===r?"User is currently busy":"Call was declined"}),io.to(t.toString()).emit("call-status-update",{sessionId:i,status:"declined",callerId:t,otherUserName:e.recipientName||"Unknown",otherUserUsername:e.recipientUsername||"Unknown"})}),e.on("accept-video-call",e=>{io.to(e.callerId).emit("video-call-accepted",{callerId:e.callerId,recipientId:e.recipientId,sessionId:e.sessionId})}),e.on("end-video-call",async e=>{const{sessionId:i,userId:t,participantId:r,duration:o}=e;try{if(o&&t&&r){const e=require("./models/VideoCallTime"),i=await e.getOrCreatePairRecord(t,r);i.addCallTime(o,"video"),await i.save()}[t.toString(),r.toString()].forEach(e=>{const r=onlineUsers.get(e);r&&io.to(r).emit("video_call_ended",{sessionId:i,endedBy:t,timestamp:(new Date).toISOString()}),io.to(e).emit("video_call_ended",{sessionId:i,endedBy:t,timestamp:(new Date).toISOString()})}),console.log(`📞 Video call ended - Session: ${i}, Ended by: ${t}`)}catch(e){console.error("Error handling video call end:",e)}}),e.on("accept-call",i=>{(i.roomId||i.sessionId)&&e.broadcast.emit("call_accepted",{sessionId:i.sessionId||i.roomId,recipientName:i.recipientName})}),e.on("decline-video-call",e=>{io.to(e.callerId).emit("video-call-declined",{callerId:e.callerId,recipientId:e.recipientId,sessionId:e.sessionId})}),e.on("disconnect",()=>{const i=[...onlineUsers.entries()].find(([i,t])=>t===e.id)?.[0];i&&(onlineUsers.delete(i),io.emit("getOnlineUsers",Array.from(onlineUsers.keys())))})}),webrtcNamespace.on("connection",e=>{e.on("join",i=>{const t=e.userId;e.join(t),webrtcUsers.set(t,e.id)}),e.on("send-video-call-invitation",async i=>{const t=i.recipientId.toString(),r=i.callerId.toString();let o=null,s=300;try{if(o=await VideoCallTime.getOrCreatePairRecord(r,t),!o.canMakeVideoCall()){const t={type:"video_call_rejected",reason:"time_limit_exceeded",message:"Video call time limit (5 minutes) exceeded for this match. No more video calls allowed.",remainingTime:0,limitExceeded:!0,sessionId:i.sessionId};return void e.emit("video_call_rejected",t)}s=o.getRemainingTime()}catch(e){}const a={senderId:r,recipientId:t,message:`${i.callerName} is inviting you to a video call`,messageType:"video_call_invitation",videoCallData:{callerId:r,callerName:i.callerName,sessionId:i.sessionId,timestamp:i.timestamp,status:"pending",remainingTime:s},createdAt:(new Date).toISOString()},n=onlineUsers.get(t);let l=!1;if(n)try{io.to(n).emit("video_call_invitation",a),io.to(n).emit("send-video-call-invitation",{callerId:r,callerName:i.callerName,callerUsername:i.callerUsername,recipientId:t,sessionId:i.sessionId,timestamp:i.timestamp}),l=!0}catch(e){}try{io.to(t).emit("video_call_invitation",a),io.to(t).emit("send-video-call-invitation",{callerId:r,callerName:i.callerName,callerUsername:i.callerUsername,recipientId:t,sessionId:i.sessionId,timestamp:i.timestamp}),l=!0}catch(e){}try{io.emit("video_call_invitation_broadcast",{callerId:r,callerName:i.callerName,callerUsername:i.callerUsername,recipientId:t,sessionId:i.sessionId,timestamp:i.timestamp,...a,targetUserId:t})}catch(e){}e.emit("video-call-invitation-result",{success:l,recipientOnline:!!n})}),e.on("video-call-offer",i=>{webrtcUsers.get(i.recipientId)?e.to(i.recipientId).emit("video-call-offer",{offer:i.offer,callerId:e.userId,callerName:i.callerName,callerAvatar:i.callerAvatar}):e.emit("video-call-failed",{message:"Recipient is not online"})}),e.on("video-call-answer",i=>{e.to(i.callerId).emit("video-call-answer",{answer:i.answer,recipientId:i.recipientId})}),e.on("ice-candidate",i=>{e.to(i.recipientId).emit("ice-candidate",{candidate:i.candidate,senderId:i.senderId})}),e.on("video-call-reject",i=>{e.to(i.callerId).emit("video-call-rejected",{recipientId:i.recipientId})}),e.on("video-call-end",async i=>{try{if(i.duration&&i.userId&&i.recipientId){const t=await VideoCallTime.getOrCreatePairRecord(i.userId,i.recipientId);return t.addCallTime(i.duration,"video"),await t.save(),void e.to(i.recipientId).emit("video-call-ended",{userId:i.userId,duration:i.duration,totalTimeSpent:t.totalTimeSpent,remainingTime:t.getRemainingTime(),limitExceeded:t.limitExceeded})}}catch(e){}e.to(i.recipientId).emit("video-call-ended",{userId:i.userId})}),e.on("video-call-cancel",i=>{e.to(i.recipientId).emit("video-call-cancelled",{callerId:i.callerId})}),e.on("disconnect",async()=>{let i;for(let[t,r]of webrtcUsers.entries())if(r===e.id){i=t,webrtcUsers.delete(t);break}if(i)try{await User.findByIdAndUpdate(i,{lastSeen:new Date})}catch(e){}})}),app.get("/",(e,i)=>{i.send("API is running...")}),app.get("/health",healthCheckEndpoint),app.get("/api/performance",performanceEndpoint),app.use("/api/admin",adminRoutes),app.use("/api/auth",authRoutes),app.use("/api/chats",chatRoutes),app.use("/api/email",emailRoutes),app.use("/api/admin/match-notifications",matchNotificationRoutes),app.use("/api/notifications",notificationRoutes),app.use("/api/payments",paymentRoutes),app.use("/api/referrals",referralRoutes),app.use("/api/relationships",relationshipRoutes),app.use("/api/reports",reportRoutes),app.use("/api/users",userRoutes),app.use("/api/wali",waliRoutes),app.use("/api/feed",feedRoutes),app.use("/api/monthly-usage",monthlyUsageRoutes),app.use("/api/dashboard",dashboardRoutes),app.use("/api/peerjs-video-call",peerjsRoutes),app.use("/api/video-recording",videoRecordingRoutes),app.use("/api/video-call-time",videoCallTimeRoutes),app.use(notFound),app.use(errorHandler);const PORT=process.env.PORT||5e3;server.listen(PORT,async()=>{console.log(`Server running in ${process.env.NODE_ENV} mode on port ${PORT}`),startScheduler(),mongoose.connection.once("connected",async()=>{setTimeout(async()=>{await createIndexes()},1e3)})});