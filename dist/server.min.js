const express=require("express"),http=require("http"),{Server:Server}=require("socket.io"),dotenv=require("dotenv"),connectDB=require("./config/db"),{notFound:notFound,errorHandler:errorHandler}=require("./middlewares/errorHandler_fixed"),adminRoutes=require("./routes/adminRoutes"),authRoutes=require("./routes/authRoutes"),chatRoutes=require("./routes/chatRoutes"),emailRoutes=require("./routes/emailRoutes"),matchNotificationRoutes=require("./routes/matchNotificationRoutes"),notificationRoutes=require("./routes/notificationRoutes"),paymentRoutes=require("./routes/paymentRoutes"),referralRoutes=require("./routes/referralRoutes"),relationshipRoutes=require("./routes/relationshipRoutes"),reportRoutes=require("./routes/reportRoutes"),userRoutes=require("./routes/userRoutes"),waliRoutes=require("./routes/waliRoutes"),feedRoutes=require("./routes/feedRoutes"),monthlyUsageRoutes=require("./routes/monthlyUsageRoutes"),dashboardRoutes=require("./routes/dashboard"),peerjsRoutes=require("./routes/peerjsRoutes"),videoRecordingRoutes=require("./routes/videoRecordingRoutes"),videoCallTimeRoutes=require("./routes/videoCallTime"),cors=require("cors"),mongoose=require("mongoose"),User=require("./models/User"),VideoCallTime=require("./models/VideoCallTime"),{trackRequestPerformance:trackRequestPerformance,performanceEndpoint:performanceEndpoint,healthCheckEndpoint:healthCheckEndpoint}=require("./middlewares/performanceMonitor"),{createIndexes:createIndexes}=require("./config/indexes"),{startScheduler:startScheduler}=require("./utils/emailScheduler");dotenv.config({path:"./env (1)"}),connectDB();const{ExpressPeerServer:ExpressPeerServer}=require("peer"),app=express(),server=http.createServer(app),peerServer=ExpressPeerServer(server,{debug:!0,path:"/",allow_discovery:!0,proxied:!0,cors:{origin:["https://quluub-reborn-project-33.vercel.app","http://localhost:8080","https://preview--quluub-reborn-project-99.lovable.app","https://love.quluub.com","https://match.quluub.com"],credentials:!0},iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"},{urls:process.env.TURN_URL,username:process.env.TURN_USERNAME,credential:process.env.TURN_PASSWORD}].filter(e=>e.urls)});app.use("/peerjs",peerServer);const corsOptions={origin:[process.env.FRONTEND_URL,"http://localhost:8080","https://preview--quluub-reborn-project-99.lovable.app","https://love.quluub.com","https://match.quluub.com","https://quluub-reborn-project-33.vercel.app"].filter(Boolean),methods:"GET,HEAD,PUT,PATCH,POST,DELETE",credentials:!0,optionsSuccessStatus:204};app.use(cors(corsOptions)),app.use(express.json()),"true"===process.env.ENABLE_PERFORMANCE_LOGGING&&(app.use(trackRequestPerformance),console.log("📈 Performance monitoring enabled"));const io=new Server(server,{path:"/socket.io/",cors:corsOptions,transports:["polling","websocket"],allowEIO3:!0,pingTimeout:3e4,pingInterval:15e3,upgradeTimeout:1e4,maxHttpBufferSize:1e6,connectTimeout:2e4,serveClient:!1,cookie:!1,allowRequest:(e,o)=>{const i=e.headers.origin,t=[process.env.FRONTEND_URL,"http://localhost:8080","https://preview--quluub-reborn-project-99.lovable.app","https://love.quluub.com","https://match.quluub.com","https://quluub-reborn-project-33.vercel.app"].filter(Boolean);console.log("🔍 Socket connection attempt from origin:",i),console.log("🔍 Allowed origins:",t),console.log("🔍 FRONTEND_URL env var:",process.env.FRONTEND_URL),!i||t.includes(i)?(console.log("✅ Socket connection allowed"),o(null,!0)):(console.warn("🚫 Socket connection rejected from origin:",i),o("Origin not allowed",!1))},allowUpgrades:!0,perMessageDeflate:{threshold:1024,concurrencyLimit:10,memLevel:7}});let onlineUsers=new Map,webrtcUsers=new Map;app.set("io",io),app.set("onlineUsers",onlineUsers);const webrtcNamespace=io.of("/webrtc");io.use(async(e,o)=>{const i=e.handshake.query.userId;if(!i)return o(new Error("Authentication error: userId is required"));e.userId=i,o()}),webrtcNamespace.use(async(e,o)=>{try{const i=e.handshake.auth.token;if(!i)return o(new Error("Authentication error: No token provided"));const t=require("jsonwebtoken").verify(i,process.env.JWT_SECRET),r=require("./models/User"),n=await r.findById(t.id);if(!n)return o(new Error("Authentication error: User not found"));e.userId=n._id.toString(),e.user=n,console.log("✅ Socket authenticated for user:",n.fname,n._id),o()}catch(e){console.error("❌ Socket authentication error:",e.message),o(new Error("Authentication error"))}}),io.on("connection",e=>{console.log("🔗 Main socket connected:",e.id),e.on("join",o=>{e.join(o),onlineUsers.set(o.toString(),e.id),io.emit("getOnlineUsers",Array.from(onlineUsers.keys())),console.log(`🏠 User ${o} joined main room with socket ${e.id}`),console.log(`👥 Total online users: ${onlineUsers.size}`),console.log("📋 Online users list:",Array.from(onlineUsers.entries()))}),e.on("join_conversation",o=>{e.join(o),console.log(`💬 Socket ${e.id} joined conversation room: ${o}`)}),e.on("leave_conversation",o=>{e.leave(o),console.log(`💬 Socket ${e.id} left conversation room: ${o}`)}),e.on("send-video-call-invitation",async o=>{console.log("📞 Video call invitation from",o.callerName,"to",o.recipientId);const i=o.recipientId.toString(),t=o.callerId.toString();let r=null,n=300;try{if(r=await VideoCallTime.getOrCreatePairRecord(t,i),!r.canMakeVideoCall()){const o={type:"video_call_rejected",reason:"time_limit_exceeded",message:"Video call time limit (5 minutes) exceeded for this match. No more video calls allowed.",remainingTime:0,limitExceeded:!0};return e.emit("video_call_rejected",o),void console.log("🚫 Video call rejected - time limit exceeded for pair:",t,i)}n=r.getRemainingTime(),console.log(`⏰ Remaining video call time for this pair: ${Math.floor(n/60)}:${n%60}`)}catch(e){console.error("Error checking video call time limit:",e)}const s={senderId:t,recipientId:i,message:`${o.callerName} is inviting you to a video call`,messageType:"video_call_invitation",videoCallData:{callerId:t,callerName:o.callerName,sessionId:o.sessionId,timestamp:o.timestamp,status:"pending",remainingTime:n},createdAt:(new Date).toISOString()},a=onlineUsers.get(i);let l=!1;if(a)try{io.to(a).emit("video_call_invitation",s),console.log("✅ LAYER 1: Direct socket notification sent"),l=!0}catch(e){console.error("❌ LAYER 1 failed:",e)}try{io.to(i).emit("video_call_invitation",s),console.log("✅ LAYER 2: Room-based notification sent"),l=!0}catch(e){console.error("❌ LAYER 2 failed:",e)}try{io.emit("video_call_invitation_broadcast",{...s,targetUserId:i}),console.log("✅ LAYER 3: Broadcast notification sent"),l=!0}catch(e){console.error("❌ LAYER 3 failed:",e)}try{io.to(t).emit("new_message",s),io.to(i).emit("new_message",s),console.log("✅ LAYER 4: Chat message notification sent")}catch(e){console.error("❌ LAYER 4 failed:",e)}e.emit("video-call-invitation-result",{success:l,recipientOnline:!!a,layersUsed:["direct","room","broadcast","chat"]}),console.log(`📊 Notification summary - Recipient: ${i}, Online: ${!!a}, Sent: ${l}`)}),e.on("accept-video-call",e=>{console.log("✅ Video call accepted by",e.recipientId,"for caller",e.callerId),io.to(e.callerId).emit("video-call-accepted",{callerId:e.callerId,recipientId:e.recipientId,sessionId:e.sessionId})}),e.on("accept-call",o=>{console.log("✅ Call accepted - notifying caller:",o),(o.roomId||o.sessionId)&&(e.broadcast.emit("call_accepted",{sessionId:o.sessionId||o.roomId,recipientName:o.recipientName}),console.log("📡 Emitted call_accepted event to notify caller"))}),e.on("decline-video-call",e=>{console.log("❌ Video call declined by",e.recipientId,"for caller",e.callerId),io.to(e.callerId).emit("video-call-declined",{callerId:e.callerId,recipientId:e.recipientId,sessionId:e.sessionId})}),e.on("end-video-call",async e=>{console.log("📞 Video call ended:",e.sessionId);try{if(e.duration&&e.callerId&&e.recipientId){const o=await VideoCallTime.getOrCreatePairRecord(e.callerId,e.recipientId);o.addCallTime(e.duration,"video"),await o.save(),console.log(`⏰ Video call time tracked: ${e.duration} seconds. Total: ${o.totalTimeSpent}s, Remaining: ${o.getRemainingTime()}s`);const i={sessionId:e.sessionId,duration:e.duration,totalTimeSpent:o.totalTimeSpent,remainingTime:o.getRemainingTime(),limitExceeded:o.limitExceeded,endedBy:e.endedBy||"unknown"};return io.to(e.callerId).emit("video-call-ended",i),void io.to(e.recipientId).emit("video-call-ended",i)}}catch(e){console.error("Error tracking video call time:",e)}io.to(e.callerId).emit("video-call-ended",{sessionId:e.sessionId,endedBy:e.endedBy||"unknown"}),io.to(e.recipientId).emit("video-call-ended",{sessionId:e.sessionId,endedBy:e.endedBy||"unknown"})}),e.on("disconnect",()=>{console.log("🔌 Main socket disconnected:",e.id);for(let[o,i]of onlineUsers.entries())if(i===e.id){console.log(`🚪 User ${o} left (socket ${e.id})`),onlineUsers.delete(o);break}console.log(`👥 Remaining online users: ${onlineUsers.size}`),io.emit("getOnlineUsers",Array.from(onlineUsers.keys()))})}),webrtcNamespace.on("connection",e=>{console.log("📹 WebRTC socket connected:",e.id,"User ID:",e.userId),e.on("join",o=>{const i=e.userId;e.join(i),webrtcUsers.set(i,e.id),console.log(`🏠 User ${e.user.fname} (${i}) joined WebRTC room with socket ${e.id}`)}),e.on("video-call-offer",o=>{console.log("📞 Video call offer from",e.user.fname,"(",e.userId,") to",o.recipientId);const i=webrtcUsers.get(o.recipientId);i?(console.log("✅ Recipient is online in WebRTC, sending offer to socket:",i),e.to(o.recipientId).emit("video-call-offer",{offer:o.offer,callerId:e.userId,callerName:o.callerName,callerAvatar:o.callerAvatar})):(console.log("❌ Recipient is not online in WebRTC namespace:",o.recipientId),e.emit("video-call-failed",{message:"Recipient is not online"}))}),e.on("video-call-answer",o=>{console.log("Video call answer from",o.recipientId,"to",o.callerId),e.to(o.callerId).emit("video-call-answer",{answer:o.answer,recipientId:o.recipientId})}),e.on("ice-candidate",o=>{console.log("ICE candidate from",o.senderId,"to",o.recipientId),e.to(o.recipientId).emit("ice-candidate",{candidate:o.candidate,senderId:o.senderId})}),e.on("video-call-reject",o=>{console.log("Video call rejected by",o.recipientId),e.to(o.callerId).emit("video-call-rejected",{recipientId:o.recipientId})}),e.on("video-call-end",async o=>{console.log("Video call ended by",o.userId);try{if(o.duration&&o.userId&&o.recipientId){const i=await VideoCallTime.getOrCreatePairRecord(o.userId,o.recipientId);return i.addCallTime(o.duration,"video"),await i.save(),console.log(`⏰ Video call time tracked: ${o.duration} seconds. Total: ${i.totalTimeSpent}s, Remaining: ${i.getRemainingTime()}s`),void e.to(o.recipientId).emit("video-call-ended",{userId:o.userId,duration:o.duration,totalTimeSpent:i.totalTimeSpent,remainingTime:i.getRemainingTime(),limitExceeded:i.limitExceeded})}}catch(e){console.error("Error tracking video call time:",e)}e.to(o.recipientId).emit("video-call-ended",{userId:o.userId})}),e.on("video-call-cancel",o=>{console.log("Video call cancelled by",o.callerId),e.to(o.recipientId).emit("video-call-cancelled",{callerId:o.callerId})}),e.on("disconnect",async()=>{let o;console.log("🔌 WebRTC user disconnected:",e.id);for(let[i,t]of webrtcUsers.entries())if(t===e.id){o=i,webrtcUsers.delete(i);break}if(o)try{await User.findByIdAndUpdate(o,{lastSeen:new Date}),console.log(`🕰️ Updated lastSeen for WebRTC user ${o}`)}catch(e){console.error("Failed to update lastSeen on disconnect:",e)}})}),app.get("/",(e,o)=>{o.send("API is running...")}),app.get("/health",healthCheckEndpoint),app.get("/api/performance",performanceEndpoint),app.use("/api/admin",adminRoutes),app.use("/api/auth",authRoutes),app.use("/api/chats",chatRoutes),app.use("/api/email",emailRoutes),app.use("/api/admin/match-notifications",matchNotificationRoutes),app.use("/api/notifications",notificationRoutes),app.use("/api/payments",paymentRoutes),app.use("/api/referrals",referralRoutes),app.use("/api/relationships",relationshipRoutes),app.use("/api/reports",reportRoutes),app.use("/api/users",userRoutes),app.use("/api/wali",waliRoutes),app.use("/api/feed",feedRoutes),app.use("/api/monthly-usage",monthlyUsageRoutes),app.use("/api/dashboard",dashboardRoutes),app.use("/api/peerjs-video-call",peerjsRoutes),app.use("/api/video-recording",videoRecordingRoutes),app.use("/api/video-call-time",videoCallTimeRoutes),app.use(notFound),app.use(errorHandler);const PORT=process.env.PORT||5e3;server.listen(PORT,async()=>{console.log(`Server running in ${process.env.NODE_ENV} mode on port ${PORT}`),startScheduler(),console.log("📧 Email scheduler started successfully"),mongoose.connection.once("connected",async()=>{setTimeout(async()=>{await createIndexes()},1e3)})});