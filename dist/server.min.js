const express=require("express"),http=require("http"),{Server:Server}=require("socket.io"),dotenv=require("dotenv"),connectDB=require("./config/db"),{notFound:notFound,errorHandler:errorHandler}=require("./middlewares/errorHandler_fixed"),adminRoutes=require("./routes/adminRoutes"),authRoutes=require("./routes/authRoutes"),chatRoutes=require("./routes/chatRoutes"),emailRoutes=require("./routes/emailRoutes"),matchNotificationRoutes=require("./routes/matchNotificationRoutes"),notificationRoutes=require("./routes/notificationRoutes"),paymentRoutes=require("./routes/paymentRoutes"),referralRoutes=require("./routes/referralRoutes"),relationshipRoutes=require("./routes/relationshipRoutes"),reportRoutes=require("./routes/reportRoutes"),userRoutes=require("./routes/userRoutes"),waliRoutes=require("./routes/waliRoutes"),feedRoutes=require("./routes/feedRoutes"),monthlyUsageRoutes=require("./routes/monthlyUsageRoutes"),dashboardRoutes=require("./routes/dashboard"),peerjsRoutes=require("./routes/peerjsRoutes"),videoRecordingRoutes=require("./routes/videoRecordingRoutes"),videoCallTimeRoutes=require("./routes/videoCallTime"),cors=require("cors"),mongoose=require("mongoose"),User=require("./models/User"),VideoCallTime=require("./models/VideoCallTime"),{trackRequestPerformance:trackRequestPerformance,performanceEndpoint:performanceEndpoint,healthCheckEndpoint:healthCheckEndpoint}=require("./middlewares/performanceMonitor"),{createIndexes:createIndexes}=require("./config/indexes"),{startScheduler:startScheduler}=require("./utils/emailScheduler");dotenv.config({path:"./env (1)"}),connectDB();const{ExpressPeerServer:ExpressPeerServer}=require("peer"),app=express(),server=http.createServer(app),peerServer=ExpressPeerServer(server,{debug:!0,path:"/",allow_discovery:!0,proxied:!0,cors:{origin:["https://quluub-reborn-project-33.vercel.app","http://localhost:8080","https://preview--quluub-reborn-project-99.lovable.app","https://love.quluub.com","https://match.quluub.com"],credentials:!0},iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"},{urls:process.env.TURN_URL,username:process.env.TURN_USERNAME,credential:process.env.TURN_PASSWORD}].filter(e=>e.urls)});app.use("/peerjs",peerServer);const corsOptions={origin:function(e,t){if(!e)return t(null,!0);const o=[process.env.FRONTEND_URL,process.env.CLIENT_URL,"http://localhost:8080","http://localhost:5173","https://preview--quluub-reborn-project-99.lovable.app","https://love.quluub.com","https://match.quluub.com","https://quluub-reborn-project-33.vercel.app"].filter(Boolean);-1!==o.indexOf(e)||(console.log(`🚫 CORS blocked origin: ${e}`),console.log(`✅ Allowed origins: ${o.join(", ")}`)),t(null,!0)},methods:["GET","HEAD","PUT","PATCH","POST","DELETE","OPTIONS"],allowedHeaders:["Content-Type","Authorization","X-Requested-With","Accept","Origin"],credentials:!0,optionsSuccessStatus:204,preflightContinue:!1};app.use(cors(corsOptions)),app.use(express.json());const io=new Server(server,{cors:corsOptions,transports:["websocket","polling"],pingTimeout:2e4,pingInterval:1e4,upgradeTimeout:5e3,maxHttpBufferSize:5e5,connectTimeout:1e4,serveClient:!1,cookie:!1,allowRequest:(e,t)=>{t(null,!0)},perMessageDeflate:{threshold:512,concurrencyLimit:5,memLevel:6}});let onlineUsers=new Map,webrtcUsers=new Map;app.set("io",io),app.set("onlineUsers",onlineUsers);const webrtcNamespace=io.of("/webrtc");io.use(async(e,t)=>{const o=e.handshake.query.userId;if(!o)return t(new Error("Authentication error: userId is required"));e.userId=o,t()}),webrtcNamespace.use(async(e,t)=>{try{const o=e.handshake.auth.token;if(!o)return t(new Error("Authentication error: No token provided"));const i=require("jsonwebtoken").verify(o,process.env.JWT_SECRET),r=require("./models/User"),s=await r.findById(i.id);if(!s)return t(new Error("Authentication error: User not found"));e.userId=s._id.toString(),e.user=s,console.log("✅ Socket authenticated for user:",s.fname,s._id),t()}catch(e){console.error("❌ Socket authentication error:",e.message),t(new Error("Authentication error"))}}),io.on("connection",e=>{e.on("join",t=>{e.join(t),onlineUsers.set(t.toString(),e.id),onlineUsers.size%10==0&&io.emit("getOnlineUsers",Array.from(onlineUsers.keys()))}),e.on("join_conversation",t=>{e.join(t)}),e.on("leave_conversation",t=>{e.leave(t)}),e.on("send-video-call-invitation",async t=>{const o=t.recipientId.toString(),i=t.callerId.toString();let r=null,s=300;try{if(r=await VideoCallTime.getOrCreatePairRecord(i,o),!r.canMakeVideoCall()){const o={type:"video_call_rejected",reason:"time_limit_exceeded",message:"Video call time limit (5 minutes) exceeded for this match. No more video calls allowed.",remainingTime:0,limitExceeded:!0,sessionId:t.sessionId};return void e.emit("video_call_rejected",o)}s=r.getRemainingTime()}catch(e){}const n={senderId:i,recipientId:o,message:`${t.callerName} is inviting you to a video call`,messageType:"video_call_invitation",videoCallData:{callerId:i,callerName:t.callerName,sessionId:t.sessionId,timestamp:t.timestamp,status:"pending",remainingTime:s},createdAt:(new Date).toISOString()},a=onlineUsers.get(o);let l=!1;if(a)try{io.to(a).emit("video_call_invitation",n),io.to(a).emit("send-video-call-invitation",{callerId:i,callerName:t.callerName,callerUsername:t.callerUsername,sessionId:t.sessionId,timestamp:t.timestamp}),l=!0}catch(e){}try{io.to(o).emit("video_call_invitation",n),io.to(o).emit("send-video-call-invitation",{callerId:i,callerName:t.callerName,callerUsername:t.callerUsername,sessionId:t.sessionId,timestamp:t.timestamp}),l=!0}catch(e){}e.emit("video-call-invitation-result",{success:l,recipientOnline:!!a})}),e.on("reject-video-call",e=>{const{sessionId:t,callerId:o,reason:i}=e,r=onlineUsers.get(o.toString());r&&(io.to(r).emit("video_call_rejected",{sessionId:t,reason:i,message:"busy"===i?"User is currently busy":"Call was declined"}),io.to(r).emit("call-status-update",{sessionId:t,status:"declined",callerId:o,otherUserName:e.recipientName||"Unknown",otherUserUsername:e.recipientUsername||"Unknown"})),io.to(o.toString()).emit("video_call_rejected",{sessionId:t,reason:i,message:"busy"===i?"User is currently busy":"Call was declined"}),io.to(o.toString()).emit("call-status-update",{sessionId:t,status:"declined",callerId:o,otherUserName:e.recipientName||"Unknown",otherUserUsername:e.recipientUsername||"Unknown"})}),e.on("accept-video-call",e=>{io.to(e.callerId).emit("video-call-accepted",{callerId:e.callerId,recipientId:e.recipientId,sessionId:e.sessionId})}),e.on("end-video-call",e=>{const{sessionId:t,userId:o,participantId:i}=e;[o.toString(),i.toString()].forEach(i=>{const r=onlineUsers.get(i);r&&(io.to(r).emit("video_call_ended",{sessionId:t,endedBy:o,timestamp:(new Date).toISOString()}),io.to(r).emit("call-status-update",{sessionId:t,status:"completed",callerId:o,otherUserName:e.otherUserName||"Unknown",otherUserUsername:e.otherUserUsername||"Unknown"})),io.to(i).emit("video_call_ended",{sessionId:t,endedBy:o,timestamp:(new Date).toISOString()}),io.to(i).emit("call-status-update",{sessionId:t,status:"completed",callerId:o,otherUserName:e.otherUserName||"Unknown",otherUserUsername:e.otherUserUsername||"Unknown"})})}),e.on("accept-call",t=>{(t.roomId||t.sessionId)&&e.broadcast.emit("call_accepted",{sessionId:t.sessionId||t.roomId,recipientName:t.recipientName})}),e.on("decline-video-call",e=>{io.to(e.callerId).emit("video-call-declined",{callerId:e.callerId,recipientId:e.recipientId,sessionId:e.sessionId})}),e.on("end-video-call",async e=>{try{if(e.duration&&e.callerId&&e.recipientId){const t=await VideoCallTime.getOrCreatePairRecord(e.callerId,e.recipientId);t.addCallTime(e.duration,"video"),await t.save();const o={sessionId:e.sessionId,duration:e.duration,totalTimeSpent:t.totalTimeSpent,remainingTime:t.getRemainingTime(),limitExceeded:t.limitExceeded,endedBy:e.endedBy||"unknown"};return io.to(e.callerId).emit("video-call-ended",o),void io.to(e.recipientId).emit("video-call-ended",o)}}catch(e){}io.to(e.callerId).emit("video-call-ended",{sessionId:e.sessionId,endedBy:e.endedBy||"unknown"}),io.to(e.recipientId).emit("video-call-ended",{sessionId:e.sessionId,endedBy:e.endedBy||"unknown"})}),e.on("disconnect",()=>{for(let[t,o]of onlineUsers.entries())if(o===e.id){onlineUsers.delete(t);break}io.emit("getOnlineUsers",Array.from(onlineUsers.keys()))})}),webrtcNamespace.on("connection",e=>{e.on("join",t=>{const o=e.userId;e.join(o),webrtcUsers.set(o,e.id)}),e.on("video-call-offer",t=>{webrtcUsers.get(t.recipientId)?e.to(t.recipientId).emit("video-call-offer",{offer:t.offer,callerId:e.userId,callerName:t.callerName,callerAvatar:t.callerAvatar}):e.emit("video-call-failed",{message:"Recipient is not online"})}),e.on("video-call-answer",t=>{e.to(t.callerId).emit("video-call-answer",{answer:t.answer,recipientId:t.recipientId})}),e.on("ice-candidate",t=>{e.to(t.recipientId).emit("ice-candidate",{candidate:t.candidate,senderId:t.senderId})}),e.on("video-call-reject",t=>{e.to(t.callerId).emit("video-call-rejected",{recipientId:t.recipientId})}),e.on("video-call-end",async t=>{try{if(t.duration&&t.userId&&t.recipientId){const o=await VideoCallTime.getOrCreatePairRecord(t.userId,t.recipientId);return o.addCallTime(t.duration,"video"),await o.save(),void e.to(t.recipientId).emit("video-call-ended",{userId:t.userId,duration:t.duration,totalTimeSpent:o.totalTimeSpent,remainingTime:o.getRemainingTime(),limitExceeded:o.limitExceeded})}}catch(e){}e.to(t.recipientId).emit("video-call-ended",{userId:t.userId})}),e.on("video-call-cancel",t=>{e.to(t.recipientId).emit("video-call-cancelled",{callerId:t.callerId})}),e.on("disconnect",async()=>{let t;for(let[o,i]of webrtcUsers.entries())if(i===e.id){t=o,webrtcUsers.delete(o);break}if(t)try{await User.findByIdAndUpdate(t,{lastSeen:new Date})}catch(e){}})}),app.get("/",(e,t)=>{t.send("API is running...")}),app.get("/health",healthCheckEndpoint),app.get("/api/performance",performanceEndpoint),app.use("/api/admin",adminRoutes),app.use("/api/auth",authRoutes),app.use("/api/chats",chatRoutes),app.use("/api/email",emailRoutes),app.use("/api/admin/match-notifications",matchNotificationRoutes),app.use("/api/notifications",notificationRoutes),app.use("/api/payments",paymentRoutes),app.use("/api/referrals",referralRoutes),app.use("/api/relationships",relationshipRoutes),app.use("/api/reports",reportRoutes),app.use("/api/users",userRoutes),app.use("/api/wali",waliRoutes),app.use("/api/feed",feedRoutes),app.use("/api/monthly-usage",monthlyUsageRoutes),app.use("/api/dashboard",dashboardRoutes),app.use("/api/peerjs-video-call",peerjsRoutes),app.use("/api/video-recording",videoRecordingRoutes),app.use("/api/video-call-time",videoCallTimeRoutes),app.use(notFound),app.use(errorHandler);const PORT=process.env.PORT||5e3;server.listen(PORT,async()=>{console.log(`Server running in ${process.env.NODE_ENV} mode on port ${PORT}`),startScheduler(),mongoose.connection.once("connected",async()=>{setTimeout(async()=>{await createIndexes()},1e3)})});