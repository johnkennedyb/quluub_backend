const express=require("express"),http=require("http"),{Server:Server}=require("socket.io"),dotenv=require("dotenv"),jwt=require("jsonwebtoken"),connectDB=require("./config/db"),{notFound:notFound,errorHandler:errorHandler}=require("./middlewares/errorHandler_fixed"),adminRoutes=require("./routes/adminRoutes"),authRoutes=require("./routes/authRoutes"),chatRoutes=require("./routes/chatRoutes"),emailRoutes=require("./routes/emailRoutes"),matchNotificationRoutes=require("./routes/matchNotificationRoutes"),notificationRoutes=require("./routes/notificationRoutes"),paymentRoutes=require("./routes/paymentRoutes"),referralRoutes=require("./routes/referralRoutes"),relationshipRoutes=require("./routes/relationshipRoutes"),reportRoutes=require("./routes/reportRoutes"),userRoutes=require("./routes/userRoutes"),waliRoutes=require("./routes/waliRoutes"),feedRoutes=require("./routes/feedRoutes"),monthlyUsageRoutes=require("./routes/monthlyUsageRoutes"),dashboardRoutes=require("./routes/dashboard"),peerjsRoutes=require("./routes/peerjsRoutes"),videoRecordingRoutes=require("./routes/videoRecordingRoutes"),videoCallTimeRoutes=require("./routes/videoCallTime"),cors=require("cors"),mongoose=require("mongoose"),User=require("./models/User"),VideoCallTime=require("./models/VideoCallTime"),compression=require("compression"),{trackRequestPerformance:trackRequestPerformance,performanceEndpoint:performanceEndpoint,healthCheckEndpoint:healthCheckEndpoint}=require("./middlewares/performanceMonitor"),{createIndexes:createIndexes}=require("./config/indexes"),{startScheduler:startScheduler}=require("./utils/emailScheduler");dotenv.config({path:"./env (1)"}),connectDB();const{ExpressPeerServer:ExpressPeerServer}=require("peer"),app=express(),server=http.createServer(app),peerServer=ExpressPeerServer(server,{debug:"production"!==process.env.NODE_ENV,path:"/",allow_discovery:!0,proxied:!0,cors:{origin:["https://quluub-reborn-project-33.vercel.app","http://localhost:8080","http://localhost:5173","https://preview--quluub-reborn-project-99.lovable.app","https://love.quluub.com","https://match.quluub.com"],credentials:!0},iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"},{urls:"stun:stun2.l.google.com:19302"},{urls:"stun:stun3.l.google.com:19302"},{urls:"stun:stun4.l.google.com:19302"},{urls:"stun:stun.stunprotocol.org:3478"},{urls:"stun:stun.voiparound.com"},{urls:"stun:stun.voipbuster.com"},{urls:"turn:openrelay.metered.ca:80",username:"openrelayproject",credential:"openrelayproject"},{urls:"turn:openrelay.metered.ca:443",username:"openrelayproject",credential:"openrelayproject"},...process.env.TURN_URL?[{urls:process.env.TURN_URL,username:process.env.TURN_USERNAME,credential:process.env.TURN_PASSWORD}]:[]]});app.use("/peerjs",peerServer);const corsOptions={origin:function(e,r){r(null,!0)},methods:["GET","HEAD","PUT","PATCH","POST","DELETE","OPTIONS"],allowedHeaders:["Content-Type","Authorization","X-Requested-With","Accept","Origin"],credentials:!0,optionsSuccessStatus:204,preflightContinue:!1};app.use(cors(corsOptions)),app.use(compression({level:6})),app.use(express.json());const io=new Server(server,{path:"/socket.io",cors:{origin:["http://localhost:8080","http://localhost:5173","http://localhost:3000","https://quluub-reborn-project-33.vercel.app","https://preview--quluub-reborn-project-99.lovable.app","https://love.quluub.com","https://match.quluub.com"],methods:["GET","POST"],credentials:!0},transports:["websocket","polling"],pingTimeout:2e4,pingInterval:1e4,upgradeTimeout:5e3,maxHttpBufferSize:5e5,connectTimeout:1e4,serveClient:!1,cookie:!1,allowRequest:(e,r)=>{r(null,!0)},perMessageDeflate:{threshold:512,concurrencyLimit:5,memLevel:6}});let onlineUsers=new Map,webrtcUsers=new Map;app.set("io",io),app.set("onlineUsers",onlineUsers);const webrtcNamespace=io.of("/webrtc");io.use(async(e,r)=>{try{const t=e.handshake.auth.token;if(!t){const t=`debug-${e.id}`;return e.userId=t,e.user={_id:t,fname:`Debug-${e.id.slice(-4)}`},r()}const o=jwt.verify(t,process.env.JWT_SECRET),s=await User.findById(o.id).select("-password");if(!s)return r(new Error("User not found"));e.userId=s._id.toString(),e.user=s,r()}catch(e){console.error("❌ Main namespace socket authentication error:",e.message),r(new Error("Authentication error"))}}),webrtcNamespace.use(async(e,r)=>{try{const t=e.handshake.auth.token;if(!t)return r(new Error("Authentication error"));const o=jwt.verify(t,process.env.JWT_SECRET),s=await User.findById(o.id).select("-password");if(!s)return r(new Error("User not found"));e.userId=s._id.toString(),e.user=s,r()}catch(e){console.error("❌ WebRTC namespace socket authentication error:",e.message),r(new Error("Authentication error"))}}),io.on("connection",e=>{e.on("join",r=>{const t=r.toString();e.join(t),onlineUsers.set(t,e.id),io.emit("getOnlineUsers",Array.from(onlineUsers.keys()))}),e.on("joinNotifications",r=>{e.join(`notifications_${r}`)}),e.on("join_conversation",r=>{e.join(r)}),e.on("leave_conversation",r=>{e.leave(r)}),e.on("reject-video-call",e=>{const{sessionId:r,callerId:t,reason:o}=e,s=onlineUsers.get(t.toString());s&&(io.to(s).emit("video_call_rejected",{sessionId:r,reason:o,message:"busy"===o?"User is currently busy":"Call was declined"}),io.to(s).emit("call-status-update",{sessionId:r,status:"declined",callerId:t,otherUserName:e.recipientName||"Unknown",otherUserUsername:e.recipientUsername||"Unknown"})),io.to(t.toString()).emit("video_call_rejected",{sessionId:r,reason:o,message:"busy"===o?"User is currently busy":"Call was declined"}),io.to(t.toString()).emit("call-status-update",{sessionId:r,status:"declined",callerId:t,otherUserName:e.recipientName||"Unknown",otherUserUsername:e.recipientUsername||"Unknown"})}),e.on("accept-video-call",e=>{io.to(e.callerId).emit("video-call-accepted",{callerId:e.callerId,recipientId:e.recipientId,sessionId:e.sessionId})}),e.on("end-video-call",async e=>{const{sessionId:r,userId:t,participantId:o,duration:s}=e;try{if(s&&t&&o){const e=require("./models/VideoCallTime"),r=await e.getOrCreatePairRecord(t,o);r.addCallTime(s,"video"),await r.save()}const e=[t.toString(),o.toString()],i=new Set;e.forEach(e=>{const o=onlineUsers.get(e);o&&!i.has(o)&&(io.to(o).emit("video_call_ended",{sessionId:r,endedBy:t,timestamp:(new Date).toISOString()}),i.add(o)),o||io.to(e).emit("video_call_ended",{sessionId:r,endedBy:t,timestamp:(new Date).toISOString()})})}catch(e){console.error("Error handling video call end:",e)}}),e.on("accept-call",r=>{if(r.roomId||r.sessionId){const t=r.sessionId||r.roomId;e.join(t),io.emit("call_accepted",{sessionId:t,recipientName:r.recipientName}),e.to(t).emit("call_accepted",{sessionId:t,recipientName:r.recipientName})}}),e.on("decline-video-call",e=>{io.to(e.callerId).emit("video-call-declined",{callerId:e.callerId,recipientId:e.recipientId,sessionId:e.sessionId})}),e.on("disconnect",()=>{const r=[...onlineUsers.entries()].find(([r,t])=>t===e.id)?.[0];r&&(onlineUsers.delete(r),io.emit("getOnlineUsers",Array.from(onlineUsers.keys())))})}),webrtcNamespace.on("connection",e=>{e.on("join",r=>{const t=e.userId;e.join(t),webrtcUsers.set(t,e.id)}),e.on("send-video-call-invitation",async r=>{const t=r.recipientId.toString(),o=r.callerId.toString();let s=null,i=300;r.sessionId&&e.join(r.sessionId);try{if(s=await VideoCallTime.getOrCreatePairRecord(o,t),!s.canMakeVideoCall()){const t={type:"video_call_rejected",reason:"time_limit_exceeded",message:"Video call time limit (5 minutes) exceeded for this match. No more video calls allowed.",remainingTime:0,limitExceeded:!0,sessionId:r.sessionId};return void e.emit("video_call_rejected",t)}i=s.getRemainingTime()}catch(e){}const n={senderId:o,recipientId:t,message:`${r.callerName} is inviting you to a video call`,messageType:"video_call_invitation",videoCallData:{callerId:o,callerName:r.callerName,sessionId:r.sessionId,timestamp:r.timestamp,status:"pending",remainingTime:i},createdAt:(new Date).toISOString()},a=onlineUsers.get(t);let c=!1;if(a)try{io.to(a).emit("video_call_invitation",n),io.to(a).emit("send-video-call-invitation",{callerId:o,callerName:r.callerName,callerUsername:r.callerUsername,recipientId:t,sessionId:r.sessionId,timestamp:r.timestamp}),c=!0}catch(e){}try{io.to(t).emit("video_call_invitation",n),io.to(t).emit("send-video-call-invitation",{callerId:o,callerName:r.callerName,callerUsername:r.callerUsername,recipientId:t,sessionId:r.sessionId,timestamp:r.timestamp}),c=!0}catch(e){}try{io.emit("video_call_invitation_broadcast",{callerId:o,callerName:r.callerName,callerUsername:r.callerUsername,recipientId:t,sessionId:r.sessionId,timestamp:r.timestamp,...n,targetUserId:t})}catch(e){}e.emit("video-call-invitation-result",{success:c,recipientOnline:!!a})}),e.on("video-call-offer",r=>{webrtcUsers.get(r.recipientId)?e.to(r.recipientId).emit("video-call-offer",{offer:r.offer,callerId:e.userId,callerName:r.callerName,callerAvatar:r.callerAvatar}):e.emit("video-call-failed",{message:"Recipient is not online"})}),e.on("video-call-answer",r=>{e.to(r.callerId).emit("video-call-answer",{answer:r.answer,recipientId:r.recipientId})}),e.on("ice-candidate",r=>{e.to(r.recipientId).emit("ice-candidate",{candidate:r.candidate,senderId:r.senderId})}),e.on("video-call-reject",r=>{e.to(r.callerId).emit("video-call-rejected",{recipientId:r.recipientId})}),e.on("video-call-end",async r=>{try{if(r.duration&&r.userId&&r.recipientId){const t=await VideoCallTime.getOrCreatePairRecord(r.userId,r.recipientId);return t.addCallTime(r.duration,"video"),await t.save(),void e.to(r.recipientId).emit("video-call-ended",{userId:r.userId,duration:r.duration,totalTimeSpent:t.totalTimeSpent,remainingTime:t.getRemainingTime(),limitExceeded:t.limitExceeded})}}catch(e){}e.to(r.recipientId).emit("video-call-ended",{userId:r.userId})}),e.on("video-call-cancel",r=>{e.to(r.recipientId).emit("video-call-cancelled",{callerId:r.callerId})}),e.on("disconnect",async()=>{let r;for(let[t,o]of webrtcUsers.entries())if(o===e.id){r=t,webrtcUsers.delete(t);break}if(r)try{await User.findByIdAndUpdate(r,{lastSeen:new Date})}catch(e){}})}),app.get("/",(e,r)=>{r.send("API is running...")}),app.get("/health",healthCheckEndpoint),app.get("/api/performance",performanceEndpoint),app.use("/api/admin",adminRoutes),app.use("/api/auth",authRoutes),app.use("/api/chats",chatRoutes),app.use("/api/email",emailRoutes),app.use("/api/admin/match-notifications",matchNotificationRoutes),app.use("/api/notifications",notificationRoutes),app.use("/api/payments",paymentRoutes),app.use("/api/referrals",referralRoutes),app.use("/api/relationships",relationshipRoutes),app.use("/api/reports",reportRoutes),app.use("/api/users",userRoutes),app.use("/api/wali",waliRoutes),app.use("/api/feed",feedRoutes),app.use("/api/monthly-usage",monthlyUsageRoutes),app.use("/api/dashboard",dashboardRoutes),app.use("/api/peerjs-video-call",peerjsRoutes),app.use("/api/video-recording",videoRecordingRoutes),app.use("/api/video-call-time",videoCallTimeRoutes);const{protect:protect}=require("./middlewares/authMiddleware");app.post("/api/user/set-online",protect,async(e,r)=>{try{const t=e.user.id,o=require("./models/User");await o.findByIdAndUpdate(t,{lastSeen:new Date,isOnline:!0}),onlineUsers.set(t,"api-connection"),io.emit("getOnlineUsers",Array.from(onlineUsers.keys())),r.json({success:!0,message:"User marked as online"})}catch(e){console.error("Error setting user online:",e),r.status(500).json({error:"Failed to set user online"})}}),app.get("/api/users/online",async(e,r)=>{try{const e=require("./models/User"),t=new Date(Date.now()-3e5),o=await e.find({lastSeen:{$gte:t}}).select("_id fname lname username lastSeen isOnline"),s=Array.from(onlineUsers.keys()),i=o.map(e=>e._id.toString()),n=[...new Set([...s,...i])];r.json({totalOnline:n.length,onlineUsers:n,recentlyActive:o,socketConnected:s})}catch(e){console.error("Error getting online users:",e),r.status(500).json({error:"Failed to get online users"})}}),app.get("/api/debug/online-users",(e,r)=>{const t=Array.from(onlineUsers.entries()).map(([e,r])=>({userId:e,socketId:r}));r.json({totalOnline:onlineUsers.size,onlineUsers:t})}),app.get("/api/debug/broadcast-online-users",(e,r)=>{const t=Array.from(onlineUsers.keys());io.emit("getOnlineUsers",t),r.json({message:"Broadcasted online users",totalOnline:onlineUsers.size,onlineUsers:t})}),app.use(notFound),app.use(errorHandler);const PORT=process.env.PORT||5e3;io.engine.on("connection_error",e=>{console.error("❌ Socket.IO connection error:",e.req),console.error("❌ Error code:",e.code),console.error("❌ Error message:",e.message),console.error("❌ Error context:",e.context)}),server.listen(PORT,async()=>{startScheduler(),mongoose.connection.once("connected",async()=>{setTimeout(async()=>{await createIndexes()},1e3)})});