const express=require("express"),http=require("http"),{Server:Server}=require("socket.io"),dotenv=require("dotenv"),jwt=require("jsonwebtoken"),connectDB=require("./config/db"),{notFound:notFound,errorHandler:errorHandler}=require("./middlewares/errorHandler_fixed"),adminRoutes=require("./routes/adminRoutes"),authRoutes=require("./routes/authRoutes"),chatRoutes=require("./routes/chatRoutes"),emailRoutes=require("./routes/emailRoutes"),matchNotificationRoutes=require("./routes/matchNotificationRoutes"),notificationRoutes=require("./routes/notificationRoutes"),paymentRoutes=require("./routes/paymentRoutes"),referralRoutes=require("./routes/referralRoutes"),relationshipRoutes=require("./routes/relationshipRoutes"),reportRoutes=require("./routes/reportRoutes"),userRoutes=require("./routes/userRoutes"),waliRoutes=require("./routes/waliRoutes"),feedRoutes=require("./routes/feedRoutes"),monthlyUsageRoutes=require("./routes/monthlyUsageRoutes"),dashboardRoutes=require("./routes/dashboard"),peerjsRoutes=require("./routes/peerjsRoutes"),videoRecordingRoutes=require("./routes/videoRecordingRoutes"),videoCallTimeRoutes=require("./routes/videoCallTime"),cors=require("cors"),mongoose=require("mongoose"),User=require("./models/User"),VideoCallTime=require("./models/VideoCallTime"),compression=require("compression"),{trackRequestPerformance:trackRequestPerformance,performanceEndpoint:performanceEndpoint,healthCheckEndpoint:healthCheckEndpoint}=require("./middlewares/performanceMonitor"),{createIndexes:createIndexes}=require("./config/indexes"),{startScheduler:startScheduler}=require("./utils/emailScheduler");dotenv.config({path:"./env (1)"}),connectDB();const{ExpressPeerServer:ExpressPeerServer}=require("peer"),app=express(),server=http.createServer(app),peerServer=ExpressPeerServer(server,{debug:"production"!==process.env.NODE_ENV,path:"/",allow_discovery:!0,proxied:!0,cors:{origin:["https://quluub-reborn-project-33.vercel.app","http://localhost:8080","http://localhost:5173","https://preview--quluub-reborn-project-99.lovable.app","https://love.quluub.com","https://match.quluub.com"],credentials:!0},iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"},{urls:"stun:stun2.l.google.com:19302"},{urls:"stun:stun3.l.google.com:19302"},{urls:"stun:stun4.l.google.com:19302"},{urls:"stun:stun.stunprotocol.org:3478"},{urls:"stun:stun.voiparound.com"},{urls:"stun:stun.voipbuster.com"},{urls:"turn:openrelay.metered.ca:80",username:"openrelayproject",credential:"openrelayproject"},{urls:"turn:openrelay.metered.ca:443",username:"openrelayproject",credential:"openrelayproject"},...process.env.TURN_URL?[{urls:process.env.TURN_URL,username:process.env.TURN_USERNAME,credential:process.env.TURN_PASSWORD}]:[]]});app.use("/peerjs",peerServer);const corsOptions={origin:function(e,t){t(null,!0)},methods:["GET","HEAD","PUT","PATCH","POST","DELETE","OPTIONS"],allowedHeaders:["Content-Type","Authorization","X-Requested-With","Accept","Origin"],credentials:!0,optionsSuccessStatus:204,preflightContinue:!1};app.use(cors(corsOptions)),app.use(compression({level:6})),app.use(express.json());const io=new Server(server,{path:"/socket.io/",cors:{origin:["http://localhost:8080","http://localhost:5173","http://localhost:3000","https://quluub-reborn-project-33.vercel.app","https://preview--quluub-reborn-project-99.lovable.app","https://love.quluub.com","https://match.quluub.com"],methods:["GET","POST"],credentials:!0},transports:["websocket","polling"],allowEIO3:!0,pingTimeout:6e4,pingInterval:25e3,upgradeTimeout:1e4,maxHttpBufferSize:1e6,connectTimeout:2e4,serveClient:!1,cookie:!1,allowRequest:(e,t)=>{console.log("üîó Socket.IO connection request from:",e.headers.origin),t(null,!0)}});let onlineUsers=new Map,webrtcUsers=new Map,activeCalls=new Map;app.set("io",io),app.set("onlineUsers",onlineUsers);const webrtcNamespace=io.of("/webrtc");app.set("webrtcNamespace",webrtcNamespace),app.set("webrtcUsers",webrtcUsers),io.use(async(e,t)=>{try{const o=e.handshake.auth.token;if(console.log("üîê Socket auth attempt:",e.id,"Token exists:",!!o),!o){const o=`debug-${e.id}`;return e.userId=o,e.user={_id:o,fname:`Debug-${e.id.slice(-4)}`},console.log("üîê Debug user created:",o),t()}try{const i=jwt.verify(o,process.env.JWT_SECRET),r=await User.findById(i.id).select("-password");if(!r){console.log("‚ùå User not found for token:",i.id);const o=`debug-${e.id}`;return e.userId=o,e.user={_id:o,fname:`Debug-${e.id.slice(-4)}`},t()}e.userId=r._id.toString(),e.user=r,console.log("‚úÖ User authenticated:",r._id,r.fname),t()}catch(o){console.log("‚ùå JWT verification failed:",o.message);const i=`debug-${e.id}`;e.userId=i,e.user={_id:i,fname:`Debug-${e.id.slice(-4)}`},t()}}catch(o){console.error("‚ùå Main namespace socket authentication error:",o.message);const i=`debug-${e.id}`;e.userId=i,e.user={_id:i,fname:`Debug-${e.id.slice(-4)}`},t()}}),webrtcNamespace.use(async(e,t)=>{try{const o=e.handshake.auth.token;if(!o)return t(new Error("Authentication error"));const i=jwt.verify(o,process.env.JWT_SECRET),r=await User.findById(i.id).select("-password");if(!r)return t(new Error("User not found"));e.userId=r._id.toString(),e.user=r,t()}catch(e){console.error("‚ùå WebRTC namespace socket authentication error:",e.message),t(new Error("Authentication error"))}}),io.on("connection",e=>{console.log("üîå New socket connection:",e.id,"User:",e.userId),console.log("üîå Current online users before join:",Array.from(onlineUsers.keys())),e.on("join",async t=>{const o=t.toString();e.join(o),onlineUsers.set(o,e.id);try{await User.findByIdAndUpdate(o,{lastSeen:new Date,isOnline:!0}),console.log("‚úÖ Database updated: User",o,"marked as online")}catch(e){console.error("‚ùå Error updating user online status:",e)}console.log("üë§ User joined:",o,"Socket:",e.id),console.log("üë• Active users after join:",Array.from(onlineUsers.keys())),console.log("üë• Total online users:",onlineUsers.size);const i=Array.from(onlineUsers.keys());io.emit("getOnlineUsers",i),e.broadcast.emit("user-came-online",{userId:o,timestamp:(new Date).toISOString()})}),e.on("joinNotifications",t=>{e.join(`notifications_${t}`)}),e.on("user-online-status",async t=>{const{userId:o,isOnline:i}=t;if(!o)return;const r=o.toString();if(i){onlineUsers.has(r)||onlineUsers.set(r,e.id);try{await User.findByIdAndUpdate(r,{lastSeen:new Date,isOnline:!0}),console.log("‚úÖ Explicit online status update: User",r,"marked as online")}catch(e){console.error("‚ùå Error in explicit online status update:",e)}const t=Array.from(onlineUsers.keys());io.emit("getOnlineUsers",t),e.broadcast.emit("user-came-online",{userId:r,timestamp:(new Date).toISOString()})}}),e.on("join_conversation",t=>{e.join(t)}),e.on("leave_conversation",t=>{e.leave(t)}),e.on("reject-video-call",e=>{const{sessionId:t,callerId:o,reason:i}=e,r=onlineUsers.get(o.toString());r&&(io.to(r).emit("video_call_rejected",{sessionId:t,reason:i,message:"busy"===i?"User is currently busy":"Call was declined"}),io.to(r).emit("call-status-update",{sessionId:t,status:"declined",callerId:o,otherUserName:e.recipientName||"Unknown",otherUserUsername:e.recipientUsername||"Unknown"})),io.to(o.toString()).emit("video_call_rejected",{sessionId:t,reason:i,message:"busy"===i?"User is currently busy":"Call was declined"}),io.to(o.toString()).emit("call-status-update",{sessionId:t,status:"declined",callerId:o,otherUserName:e.recipientName||"Unknown",otherUserUsername:e.recipientUsername||"Unknown"});try{require("./models/Notification").deleteMany({type:"video_call_invitation",relatedId:t}).catch(()=>{})}catch(e){console.warn("‚ö†Ô∏è Failed to clear notifications on reject-video-call:",e?.message||e)}}),e.on("cancel-video-call",e=>{const{sessionId:t,callerId:o,recipientId:i}=e,r=onlineUsers.get(i.toString());r&&io.to(r).emit("video_call_canceled",{sessionId:t,callerId:o}),io.to(i.toString()).emit("video_call_canceled",{sessionId:t,callerId:o});try{require("./models/Notification").deleteMany({type:"video_call_invitation",relatedId:t}).catch(()=>{})}catch(e){console.warn("‚ö†Ô∏è Failed to clear notifications on cancel-video-call:",e?.message||e)}}),e.on("accept-call",async e=>{const{sessionId:t,recipientId:o,recipientName:i,callerId:r}=e;console.log("üìû Call accepted by recipient:",{sessionId:t,recipientId:o,callerId:r}),console.log("üìû Current online users:",Array.from(onlineUsers.keys()));const s=(new Date).toISOString(),n=Date.now();let a=300;console.log("‚è±Ô∏è Checking video call time limit for pair:",{callerId:r,recipientId:o});try{const e=require("./models/VideoCallTime");a=(await e.getOrCreatePairRecord(r,o)).getRemainingTime(),console.log("‚è±Ô∏è Remaining time at call start:",a,"seconds")}catch(e){console.warn("‚ö†Ô∏è Failed to compute remainingAtStart:",e?.message||e)}if(a<=0){console.log("üö´ Video call time limit exceeded for pair:",{callerId:r,recipientId:o});const e={sessionId:t,remainingAtStart:0,message:"Video call time limit exceeded for this match"},i=onlineUsers.get(r?.toString()),s=onlineUsers.get(o?.toString());return i&&io.to(i).emit("video_call_time_exceeded",e),s&&io.to(s).emit("video_call_time_exceeded",e),io.to(r?.toString()).emit("video_call_time_exceeded",e),void io.to(o?.toString()).emit("video_call_time_exceeded",e)}const l=onlineUsers.get(r?.toString());l?(io.to(l).emit("call_accepted",{sessionId:t,recipientId:o,recipientName:i,callerId:r}),console.log("‚úÖ Layer 1: Notified caller via socket ID:",l),io.to(l).emit("call_started",{sessionId:t,startAt:s,remainingAtStart:a,callerId:r,recipientId:o,serverNowMs:n})):console.warn("‚ö†Ô∏è Caller socket ID not found in onlineUsers map"),io.to(r?.toString()).emit("call_accepted",{sessionId:t,recipientId:o,recipientName:i,callerId:r}),console.log("‚úÖ Layer 2: Notified caller via room:",r),io.to(r?.toString()).emit("call_started",{sessionId:t,startAt:s,remainingAtStart:a,callerId:r,recipientId:o,serverNowMs:n}),io.emit("call_accepted",{sessionId:t,recipientId:o,recipientName:i,callerId:r}),console.log("‚úÖ Layer 3: Broadcast call_accepted to all clients");const c=onlineUsers.get(o?.toString());c&&io.to(c).emit("call_started",{sessionId:t,startAt:s,remainingAtStart:a,callerId:r,recipientId:o,serverNowMs:n}),io.to(o?.toString()).emit("call_started",{sessionId:t,startAt:s,remainingAtStart:a,callerId:r,recipientId:o,serverNowMs:n});try{activeCalls.set(t,{callerId:r?.toString(),recipientId:o?.toString(),startAtMs:Date.parse(s),remainingAtStart:a})}catch(e){console.warn("‚ö†Ô∏è Failed to store active call session:",e?.message||e)}try{require("./models/Notification").deleteMany({type:"video_call_invitation",relatedId:t}).catch(()=>{})}catch(e){console.warn("‚ö†Ô∏è Failed to clear notifications on accept-call:",e?.message||e)}}),e.on("accept-video-call",e=>{io.to(e.callerId).emit("video-call-accepted",{callerId:e.callerId,recipientId:e.recipientId,sessionId:e.sessionId})}),e.on("end-video-call",async(e,t)=>{const{sessionId:o,userId:i,participantId:r,duration:s}=e;try{const n=require("./models/VideoCallTime"),a=await n.getOrCreatePairRecord(i,r);console.log("‚è±Ô∏è Ending video call with data:",e),console.log("‚è±Ô∏è Current video call record:",{totalTimeSpent:a.totalTimeSpent,maxAllowedTime:a.maxAllowedTime,limitExceeded:a.limitExceeded,remainingTime:a.getRemainingTime()});let l=0;const c=o?activeCalls.get(o):null;c&&c.startAtMs&&(l=Math.max(0,Math.floor((Date.now()-c.startAtMs)/1e3)),activeCalls.delete(o));const d="number"==typeof s?s:0;let m=Math.max(d,l);const u=a.getRemainingTime();m>u&&(m=u),m>0?(a.addCallTime(m,"video"),await a.save(),console.log("‚úÖ Tracked video call time:",{sessionId:o,finalDuration:m,remainingAfter:a.getRemainingTime(),limitExceeded:a.limitExceeded}),a.limitExceeded&&(console.log("üö´ Video call time limit exceeded for pair:",{userId:i,participantId:r}),[i.toString(),r.toString()].forEach(e=>{const t=onlineUsers.get(e),i={sessionId:o,remainingAtStart:0,message:"Video call time limit exceeded for this match. No more video calls allowed."};t&&io.to(t).emit("video_call_time_exceeded",i),io.to(e).emit("video_call_time_exceeded",i)}))):console.log("‚ÑπÔ∏è No call duration to track (finalDuration=0).",{sessionId:o,clientDuration:d,serverMeasured:l});const p=[i.toString(),r.toString()],g=new Set;p.forEach(e=>{const t=onlineUsers.get(e);t&&!g.has(t)&&(io.to(t).emit("video_call_ended",{sessionId:o,endedBy:i,timestamp:(new Date).toISOString(),totalTimeSpent:a.totalTimeSpent,remainingTime:a.getRemainingTime(),limitExceeded:a.limitExceeded}),g.add(t)),t||io.to(e).emit("video_call_ended",{sessionId:o,endedBy:i,timestamp:(new Date).toISOString(),totalTimeSpent:a.totalTimeSpent,remainingTime:a.getRemainingTime(),limitExceeded:a.limitExceeded})});try{require("./models/Notification").deleteMany({type:"video_call_invitation",relatedId:o}).catch(()=>{})}catch(e){console.warn("‚ö†Ô∏è Failed to clear notifications on end-video-call:",e?.message||e)}try{"function"==typeof t&&t({ok:!0,sessionId:o,totalTimeSpent:a.totalTimeSpent,remainingTime:a.getRemainingTime(),limitExceeded:a.limitExceeded})}catch{}}catch(e){console.error("Error handling video call end:",e);try{"function"==typeof t&&t({ok:!1,error:e?.message||"Failed to end video call"})}catch{}}}),e.on("peer-call-ended",async t=>{if(!t||!t.userId)return void console.error("‚ùå peer-call-ended: Invalid data received:",t);const{userId:o,sessionId:i,participantId:r}=t;if(console.log("‚è±Ô∏è Peer call ended with data:",t),i&&r){try{const e=require("./models/VideoCallTime"),t=await e.getOrCreatePairRecord(o,r);let s=0;const n=i?activeCalls.get(i):null;if(n&&n.startAtMs&&(s=Math.max(0,Math.floor((Date.now()-n.startAtMs)/1e3)),activeCalls.delete(i)),s>0){const e=t.getRemainingTime();let o=s;o>e&&(o=e),t.addCallTime(o,"video"),await t.save(),console.log("‚úÖ Tracked video call time on peer-call-ended:",{sessionId:i,finalDuration:o,remainingAfter:t.getRemainingTime(),limitExceeded:t.limitExceeded})}}catch(e){console.error("Error tracking video call time on peer-call-ended:",e)}const e=[o.toString(),r.toString()],t=new Set;e.forEach(e=>{const r=onlineUsers.get(e);r&&!t.has(r)&&(io.to(r).emit("video_call_ended",{sessionId:i,endedBy:o,timestamp:(new Date).toISOString()}),t.add(r)),r||io.to(e).emit("video_call_ended",{sessionId:i,endedBy:o,timestamp:(new Date).toISOString()})});try{require("./models/Notification").deleteMany({type:"video_call_invitation",relatedId:i}).catch(()=>{})}catch(e){console.warn("‚ö†Ô∏è Failed to clear notifications on peer-call-ended:",e?.message||e)}}else e.broadcast.emit("peer_call_terminated",{terminatedBy:o,timestamp:(new Date).toISOString()})}),e.on("decline-video-call",e=>{io.to(e.callerId).emit("video-call-declined",{callerId:e.callerId,recipientId:e.recipientId,sessionId:e.sessionId})}),e.on("disconnect",()=>{const t=[...onlineUsers.entries()].find(([t,o])=>o===e.id)?.[0];t&&(onlineUsers.delete(t),io.emit("getOnlineUsers",Array.from(onlineUsers.keys())))})}),webrtcNamespace.on("connection",e=>{e.on("join",async t=>{const o=e.userId;e.join(o),webrtcUsers.set(o,e.id);try{await User.findByIdAndUpdate(o,{lastSeen:new Date,isOnline:!0}),console.log("‚úÖ WebRTC Database updated: User",o,"marked as online")}catch(e){console.error("‚ùå Error updating WebRTC user online status:",e)}console.log("üìπ WebRTC user joined:",o,"Socket:",e.id),console.log("üìπ WebRTC users count:",webrtcUsers.size),io.emit("user-webrtc-ready",{userId:o,timestamp:(new Date).toISOString()}),webrtcNamespace.emit("user-webrtc-ready",{userId:o,timestamp:(new Date).toISOString()}),Object.values(webrtcUsers).forEach(e=>{try{webrtcNamespace.to(e).emit("user-webrtc-ready",{userId:o,timestamp:(new Date).toISOString()})}catch(t){console.error("Failed to emit user-webrtc-ready to",e,t)}})}),e.on("send-video-call-invitation",async t=>{try{console.log("üü¶ [DEBUG] webrtcUsers at call invitation:",Array.from(webrtcUsers.entries()))}catch(e){console.error("üü• [DEBUG] webrtcUsers print error:",e)}const o=t.recipientId.toString(),i=t.callerId.toString();let r=null,s=300;t.sessionId&&e.join(t.sessionId);try{if(r=await VideoCallTime.getOrCreatePairRecord(i,o),!r.canMakeVideoCall()){const o={type:"video_call_rejected",reason:"time_limit_exceeded",message:"Video call time limit (5 minutes) exceeded for this match. No more video calls allowed.",remainingTime:0,limitExceeded:!0,sessionId:t.sessionId};return void e.emit("video_call_rejected",o)}s=r.getRemainingTime()}catch(e){}const n={senderId:i,recipientId:o,message:`${t.callerName} is inviting you to a video call`,messageType:"video_call_invitation",videoCallData:{callerId:i,callerName:t.callerName,sessionId:t.sessionId,timestamp:t.timestamp,status:"pending",remainingTime:s},createdAt:(new Date).toISOString()},a=onlineUsers.get(o);let l=!1;if(a)try{io.to(a).emit("video_call_invitation",n),io.to(a).emit("send-video-call-invitation",{callerId:i,callerName:t.callerName,callerUsername:t.callerUsername,recipientId:o,sessionId:t.sessionId,timestamp:t.timestamp}),l=!0}catch(e){}try{io.to(o).emit("video_call_invitation",n),io.to(o).emit("send-video-call-invitation",{callerId:i,callerName:t.callerName,callerUsername:t.callerUsername,recipientId:o,sessionId:t.sessionId,timestamp:t.timestamp}),l=!0}catch(e){}try{io.emit("video_call_invitation_broadcast",{callerId:i,callerName:t.callerName,callerUsername:t.callerUsername,recipientId:o,sessionId:t.sessionId,timestamp:t.timestamp,...n,targetUserId:o})}catch(e){}e.emit("video-call-invitation-result",{success:l,recipientOnline:!!a})}),e.on("video-call-offer",t=>{webrtcUsers.get(t.recipientId)?e.to(t.recipientId).emit("video-call-offer",{offer:t.offer,callerId:e.userId,callerName:t.callerName,callerAvatar:t.callerAvatar}):e.emit("video-call-failed",{message:"Recipient is not online"})}),e.on("video-call-answer",t=>{e.to(t.callerId).emit("video-call-answer",{answer:t.answer,recipientId:t.recipientId})}),e.on("ice-candidate",t=>{e.to(t.recipientId).emit("ice-candidate",{candidate:t.candidate,senderId:t.senderId})}),e.on("video-call-reject",t=>{e.to(t.callerId).emit("video-call-rejected",{recipientId:t.recipientId})}),e.on("video-call-end",async t=>{try{if(t.duration&&t.userId&&t.recipientId){const o=await VideoCallTime.getOrCreatePairRecord(t.userId,t.recipientId);return o.addCallTime(t.duration,"video"),await o.save(),void e.to(t.recipientId).emit("video-call-ended",{userId:t.userId,duration:t.duration,totalTimeSpent:o.totalTimeSpent,remainingTime:o.getRemainingTime(),limitExceeded:o.limitExceeded})}}catch(e){}e.to(t.recipientId).emit("video-call-ended",{userId:t.userId})}),e.on("video-call-cancel",t=>{e.to(t.recipientId).emit("video-call-cancelled",{callerId:t.callerId})}),e.on("disconnect",async()=>{let t;for(let[o,i]of webrtcUsers.entries())if(i===e.id){t=o,webrtcUsers.delete(o);break}if(t)try{await User.findByIdAndUpdate(t,{lastSeen:new Date})}catch(e){}})}),app.get("/",(e,t)=>{t.send("API is running...")}),app.get("/health",healthCheckEndpoint),app.get("/api/performance",performanceEndpoint),app.use("/api/admin",adminRoutes),app.use("/api/auth",authRoutes),app.use("/api/chats",chatRoutes),app.use("/api/email",emailRoutes),app.use("/api/admin/match-notifications",matchNotificationRoutes),app.use("/api/notifications",notificationRoutes),app.use("/api/payments",paymentRoutes),app.use("/api/referrals",referralRoutes),app.use("/api/relationships",relationshipRoutes),app.use("/api/reports",reportRoutes),app.use("/api/users",userRoutes),app.use("/api/wali",waliRoutes),app.use("/api/feed",feedRoutes),app.use("/api/monthly-usage",monthlyUsageRoutes),app.use("/api/dashboard",dashboardRoutes),app.use("/api/peerjs-video-call",peerjsRoutes),app.use("/api/video-recording",videoRecordingRoutes),app.use("/api/video-call-time",videoCallTimeRoutes);const{protect:protect}=require("./middlewares/authMiddleware");app.post("/api/user/set-online",protect,async(e,t)=>{try{const o=e.user.id,i=require("./models/User");await i.findByIdAndUpdate(o,{lastSeen:new Date,isOnline:!0}),onlineUsers.set(o,"api-connection"),io.emit("getOnlineUsers",Array.from(onlineUsers.keys())),t.json({success:!0,message:"User marked as online"})}catch(e){console.error("Error setting user online:",e),t.status(500).json({error:"Failed to set user online"})}}),app.get("/api/users/online",async(e,t)=>{try{const e=require("./models/User"),o=new Date(Date.now()-3e5),i=await e.find({lastSeen:{$gte:o}}).select("_id fname lname username lastSeen isOnline"),r=Array.from(onlineUsers.keys()),s=i.map(e=>e._id.toString()),n=[...new Set([...r,...s])];t.json({totalOnline:n.length,onlineUsers:n,recentlyActive:i,socketConnected:r})}catch(e){console.error("Error getting online users:",e),t.status(500).json({error:"Failed to get online users"})}}),app.get("/api/debug/online-users",async(e,t)=>{console.log("üîç DEBUG ENDPOINT CALLED - Current state:"),console.log("üìä Online users map:",Array.from(onlineUsers.entries())),console.log("üìπ WebRTC users map:",Array.from(webrtcUsers.entries()));let o=[];try{const e=new Date(Date.now()-3e5),t=await User.find({lastSeen:{$gte:e}}).select("_id fname lname username lastSeen isOnline");o=t,console.log("üíæ Recently active users from DB:",t.map(e=>({id:e._id,name:`${e.fname} ${e.lname}`,lastSeen:e.lastSeen})))}catch(e){console.error("‚ùå Error fetching recently active users:",e)}const i=Array.from(io.sockets.adapter.rooms.keys()).filter(e=>!e.startsWith("notifications_")),r=webrtcNamespace?Array.from(webrtcNamespace.adapter.rooms.keys()):[];console.log("üè† Main namespace rooms:",i),console.log("üìπ WebRTC namespace rooms:",r),t.json({onlineUsers:Array.from(onlineUsers.keys()),onlineUsersCount:onlineUsers.size,onlineUsersMap:Object.fromEntries(onlineUsers),webrtcUsers:Array.from(webrtcUsers.keys()),webrtcUsersCount:webrtcUsers.size,webrtcUsersMap:Object.fromEntries(webrtcUsers),recentlyActiveUsers:o.map(e=>({id:e._id,name:`${e.fname} ${e.lname}`,username:e.username,lastSeen:e.lastSeen,isOnline:e.isOnline})),mainRooms:i,webrtcRooms:r,timestamp:(new Date).toISOString()})}),app.get("/api/debug/broadcast-online-users",(e,t)=>{io.emit("getOnlineUsers",onlineUsersList),t.json({message:"Broadcasted online users",totalOnline:onlineUsers.size,onlineUsers:onlineUsersList})}),app.use(notFound),app.use(errorHandler);const PORT=process.env.PORT||5e3;io.engine.on("connection_error",e=>{console.error("‚ùå Socket.IO connection error:",e.req),console.error("‚ùå Error code:",e.code),console.error("‚ùå Error message:",e.message),console.error("‚ùå Error context:",e.context)}),server.listen(PORT,async()=>{startScheduler(),mongoose.connection.once("connected",async()=>{setTimeout(async()=>{await createIndexes()},1e3)})});